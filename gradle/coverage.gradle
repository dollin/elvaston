apply plugin: 'jacoco'

ext {
    //TODO Put this back to 100%
    limits = [
            'instruction' : 50,
            'branch'      : 50,
            'line'        : 50,
            'complexity'  : 50,
            'method'      : 50,
            'class'       : 50
    ]
}

jacocoTestReport {
    reports {
        xml.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [

            ])
        })
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        def htmlReport = file("${jacoco.reportsDir}/test/html/index.html")

        logger.lifecycle("Checking coverage results: ${report}")
        logger.lifecycle("Html report: ${htmlReport}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            if (null == it) {
                return 100
            }
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }
        def metrics =[:]
        metrics << [
                'instruction': percentage(results.counter.find { it.'@type'.equals('INSTRUCTION') }),
                'branch': percentage(results.counter.find { it.'@type'.equals('BRANCH') }),
                'line': percentage(results.counter.find { it.'@type'.equals('LINE') }),
                'complexity': percentage(results.counter.find { it.'@type'.equals('COMPLEXITY') }),
                'method': percentage(results.counter.find { it.'@type'.equals('METHOD') }),
                'class': percentage(results.counter.find { it.'@type'.equals('CLASS') })
        ]

        def failures = []
        def canIncrease = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is ${it.value}%, minimum is ${limit}%")
            }
            if (it.value > limit + 1) {
                canIncrease.add("- ${it.key} coverage rate is ${it.value}%, minimum is ${limit}%")
            }
        }
        if (failures) {
            logger.quiet("------- Code Coverage Failed -------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("------------------------------------");
            if (!project.hasProperty("skipCoverage")) {
                throw new GradleException("Code coverage failed")
            }
        }
        if (canIncrease) {
            logger.quiet("------- Code Coverage Improved! ----")
            canIncrease.each {
                logger.quiet(it)
            }
            logger.quiet("------------------------------------");
        }
    }
}

check.dependsOn jacocoTestReport